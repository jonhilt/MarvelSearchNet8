@using MarvelSearch.Backend
@using MarvelSearch.Data
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject ApplicationDbContext Db

<div class="p-6 border border-gray-300 rounded-md">
    <img src="@Result.Thumbnail.FullPath" alt="..." class="h-80 object-cover mx-auto">
    <div class="mt-4">
        <div class="flex justify-content-between">
            <h5 class="text-xl font-medium my-2">@Result.Name</h5>
            <AuthorizeView>
                <Authorized>
                   @if (_isFavourite)
                   {
                       <img src="icons/heart-filled.svg" style="height:25px; width: 25px;" class="btn-outline-light" @onclick="Like"/>
                   }
                   else
                   {
                       <img src="icons/heart-outline.svg" style="height:25px; width: 25px;" class="btn-outline-light" @onclick="Like"/>
                   }
                </Authorized>
            </AuthorizeView>

        </div>
        <p class="leading-8">@Result.Description</p>
    </div>
</div>

@code {
    private bool _isFavourite;  

    [Parameter]
    public MarvelSearchResult.Result Result { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var id = await GetUserId();
        _isFavourite = await LookupFavourite(id) != null;
    }

    private async Task Like()
    {
        var userId = await GetUserId();
        if (userId == null)
            return;
        
        var existing = await LookupFavourite(userId);
        if (existing != null)
        {
            Db.Favourite.Remove(existing);
            _isFavourite = false;
        }
        else
        {
            Db.Favourite.Add(new Favourite
            {
                UserId = userId,
                MarvelId = Result.Id,
                CharacterName = Result.Name
            });
            _isFavourite = true;
        }

        await Db.SaveChangesAsync();
    }

    private async Task<string?> GetUserId()
    {
        if (authenticationState == null) return null;
        var auth = await authenticationState;
       return auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
    }
    
    private async Task<Favourite?> LookupFavourite(string? userNameIdentifier)
    {
        if (userNameIdentifier == null)
            return null;

        return await Db.Favourite
            .SingleOrDefaultAsync(x => x.MarvelId == Result.Id && x.UserId == userNameIdentifier);
    }

}