@using MarvelSearch.Data
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using MarvelSharp.Model
@inject NavigationManager NavMan

@inject ApplicationDbContext Db

@if (Result != null)
{
    <Card ImageUrl="@(Result.Thumbnail.Path + "." + Result.Thumbnail.Extension)" @onclick="NavigateToDetails">
        <Header>
            <h5 class="text-xl font-medium my-2">@Result.Name</h5>
        </Header>
        <ChildContent>
            <p class="leading-8">@Result.Description</p>
            <div class="flex justify-end flex-0">
                <AuthorizeView>
                    <Authorized>
                        @if (_isFavourite)
                        {
                            <button class="h-6 w-16 hover:bg-indigo-200" @onclick:stopPropagation="true" @onclick="Like">Unlike</button>
                        }
                        else
                        {
                            <button class="h-6 w-16 hover:bg-indigo-200" @onclick:stopPropagation="true" @onclick="Like">Like</button>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </ChildContent>
    </Card>
}

@code {
    private bool _isFavourite;

    [Parameter]
    public Character? Result { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var id = await GetUserId();
        _isFavourite = await LookupFavourite(id) != null;
    }

    private async Task Like()
    {
        var userId = await GetUserId();
        if (userId == null)
            return;

        var existing = await LookupFavourite(userId);
        if (existing != null)
        {
            Db.Favourite.Remove(existing);
            _isFavourite = false;
        }
        else
        {
            Db.Favourite.Add(new Favourite
            {
                UserId = userId,
                MarvelId = Result.Id.GetValueOrDefault(),
                CharacterName = Result.Name
            });
            _isFavourite = true;
        }

        await Db.SaveChangesAsync();
    }

    private async Task<string?> GetUserId()
    {
        if (authenticationState == null) return null;
        var auth = await authenticationState;
        return auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    private async Task<Favourite?> LookupFavourite(string? userNameIdentifier)
    {
        if (userNameIdentifier == null)
            return null;

        return await Db.Favourite
            .SingleOrDefaultAsync(x => x.MarvelId == Result.Id && x.UserId == userNameIdentifier);
    }

    private void NavigateToDetails()
    {
        NavMan.NavigateTo($"/character/{Result.Id}");
    }

}