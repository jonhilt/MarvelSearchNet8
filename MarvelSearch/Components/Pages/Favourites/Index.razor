@page "/Favourites"
@using MarvelSearch.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject ApplicationDbContext DbContext
@attribute [Authorize]

<AuthorizeView>

    <QuickGrid Items="@DbContext.Favourite.Where(x => x.UserId == context.User.FindFirstValue(ClaimTypes.NameIdentifier))"
               @ref="favouritesGrid" class="table table-bordered table-striped">
        <PropertyColumn Property="@(p => p.CharacterName)" class="p-2" Title="Name"/>
        <PropertyColumn Property="@(p => p.MarvelId)" class="p-2" Title="Marvel Id"/>
    </QuickGrid>

    <form method="post" @formname="clearFavourites" data-enhance @onsubmit="Clear" class="border rounded p-3 mb-4">
        <h4>Reset Favourites</h4>
        <button type="submit" class="btn btn-danger my-2">Reset</button>
        <AntiforgeryToken/>
    </form>

</AuthorizeView>


@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    QuickGrid<Favourite> favouritesGrid;

    private async Task Clear()
    {
        var userId = await GetUserId();
        await Db.Database.ExecuteSqlRawAsync("delete from Favourite where UserId={0}", userId);
        await favouritesGrid.RefreshDataAsync();
    }

    private async Task<string?> GetUserId()
    {
        if (authenticationState == null) return null;
        var auth = await authenticationState;
        var id = auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
        return id;
    }

}